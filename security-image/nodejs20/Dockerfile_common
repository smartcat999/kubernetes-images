FROM alpine:edge as openssl

ENV OPENSSL_VERSION openssl-3.1.0+quic
ENV NODE_VERSION 20.2.0
ENV NODE_BRANCH v20.x

WORKDIR /tmp

RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories \
    && apk add git openssh perl perl-text-template nasm \
    && apk add --no-cache libstdc++ \
    && apk add --no-cache --virtual .build-deps curl \
    && git config --global user.email "smartcat999@example.com" \
    && git config --global user.name "smartcat999"

RUN ARCH= && alpineArch="$(apk --print-arch)" \
    && echo "Building from source" \
    # backup build
    && apk add --no-cache --virtual .build-deps-full \
        binutils-gold \
        g++ \
        gcc \
        gnupg \
        libgcc \
        linux-headers \
        make \
        python3 \
    && git clone https://github.com/nodejs/node.git \
    && cd node  \
    && git checkout ${NODE_BRANCH} \
    && cd ..

RUN git clone https://github.com/quictls/openssl  \
    && cd openssl  \
    && git checkout $OPENSSL_VERSION \
    && cd ../node/deps/openssl \
    && rm -rf openssl \
    && cp -R ../../../openssl openssl \
    && rm -rf openssl/.git* openssl/.travis* \
    && git add --all openssl \
    && git commit openssl -m "deps: upgrade openssl sources to quictls/${OPENSSL_VERSION}"

RUN cd /tmp/node \
    && make -C deps/openssl/config clean \
    && make -C deps/openssl/config \
    && git add deps/openssl/config/archs \
    && git add deps/openssl/openssl \
    && git commit -m "deps: update archs files for quictls/${OPENSSL_VERSION}"


FROM alpine:edge as base

COPY --from=openssl /tmp/node /tmp/node

ENV NODE_VERSION 20.2.0

RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories \
    && addgroup -g 1000 node \
    && adduser -u 1000 -G node -s /bin/sh -D node \
    && apk add --no-cache \
        libstdc++ \
    && apk add --no-cache --virtual .build-deps curl \
    && echo "Building from source" \
    # backup build
    && apk add --no-cache --virtual .build-deps-full \
        binutils-gold \
        g++ \
        gcc \
        gnupg \
        libgcc \
        linux-headers \
        make \
        python3 \
    && cd /tmp/node \
    && ./configure \
    && make -j$(getconf _NPROCESSORS_ONLN) V= \
    && make install \
    && apk del .build-deps-full \
    && cd .. \
  && apk del .build-deps \
  # smoke tests
  && node --version \
  && npm --version \
  && rm -rf /tmp/node

ENV YARN_VERSION 1.22.19

RUN apk add --no-cache --virtual .build-deps-yarn curl gnupg tar \
  && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
  && mkdir -p /opt \
  && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \
  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn \
  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg \
  && rm yarn-v$YARN_VERSION.tar.gz \
  && apk del .build-deps-yarn \
  # smoke test
  && yarn --version

RUN apk add shadow && \
    usermod -s /sbin/nologin -g nogroup sync && \
    usermod -s /sbin/nologin -g nogroup shutdown && \
    usermod -s /sbin/nologin -g nogroup halt && \
    usermod -s /sbin/nologin -g nogroup operator && \
    apk del shadow

RUN apk update && \
    apk --no-cache upgrade --available && \
    sync && \
    rm /var/cache/apk/*

RUN rm /usr/bin/id && find /etc ! -perm 600 -name "*.crt" -o ! -perm 600 -name "*.pem" 2>/dev/null | xargs -I {} chmod 600 {} && \
    find /etc ! -perm 640 -name "*.conf" 2>/dev/null | grep -v "/etc/resolv.conf" | xargs -I {} chmod 640 {} && \
    find /usr ! -perm 600 -name "*.crt" -o ! -perm 600 -name "*.pem" 2>/dev/null | xargs -I {} chmod 600 {} && \
    find /usr ! -perm 640 -name "*.conf" 2>/dev/null | xargs -I {} chmod 640 {} && \
    rm /etc/ssl/cert.pem && rm -rf /etc/ssl/certs/


COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]

CMD [ "node" ]


FROM scratch

ENV NODE_VERSION 20.2.0

COPY --from=base / /

ENTRYPOINT ["docker-entrypoint.sh"]

CMD [ "node" ]